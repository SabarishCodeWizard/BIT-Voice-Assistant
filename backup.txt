import random
import pyttsx3
import spacy
from textblob import TextBlob
import speech_recognition as sr
from flask import Flask, render_template, request, redirect
import firebase_admin
from firebase_admin import credentials, db
import json
import os
from dotenv import load_dotenv


load_dotenv()

firebase_config = {
    "apiKey": os.getenv("FIREBASE_API_KEY"),
    "authDomain": os.getenv("FIREBASE_AUTH_DOMAIN"),
    "databaseURL": os.getenv("FIREBASE_DATABASE_URL"),
    "projectId": os.getenv("FIREBASE_PROJECT_ID"),
    "storageBucket": os.getenv("FIREBASE_STORAGE_BUCKET"),
    "messagingSenderId": os.getenv("FIREBASE_MESSAGING_SENDER_ID"),
    "appId": os.getenv("FIREBASE_APP_ID"),
}


cred = credentials.Certificate("D:/GitHub/BIT-Voice-Assistant-main/voice/voice-e358a-firebase-adminsdk-o9t2y-1ef8f373a8.json")

try:
    firebase_admin.initialize_app(cred, firebase_config)
except Exception as e:
    print(f"Firebase initialization error: {e}")




app = Flask(__name__)

# Load the spaCy English model
nlp = spacy.load("en_core_web_sm")

def analyze_sentiment(text):
    # Use TextBlob for sentiment analysis
    blob = TextBlob(text)
    sentiment_score = blob.sentiment.polarity

    if sentiment_score > 0:
        return "positive"
    elif sentiment_score < 0:
        return "negative"
    else:
        return "neutral"

def text_to_speech(text, language='en', voice_gender='f'):
    engine = pyttsx3.init()
    voices = engine.getProperty('voices')

    # Select voice based on language and gender
    if language == 'ta':
        voice_id = 'ta+m1' if voice_gender == 'm' else 'ta+f1'
    elif language == 'hi':
        voice_id = 'hi+m1' if voice_gender == 'm' else 'hi+f1'
    else:
        voice_id = 'en+m3' if voice_gender == 'm' else 'en+f3'

    # Set the selected voice
    selected_voice = None
    for voice in voices:
        if voice_id in voice.id:
            selected_voice = voice
            break

    if selected_voice:
        engine.setProperty('voice', selected_voice.id)
    else:
        print(f"Voice not found for voice ID: {voice_id}. Using the default voice.")

    engine.setProperty('rate', 150)
    engine.say(text)
    engine.runAndWait()

def process_query():
    continue_playing = True
    language_choice = ''
    voice_gender = ''

    while continue_playing:
        r = sr.Recognizer()

        if not language_choice:
            text_to_speech("Select a language (English, Tamil, Hindi):")
            with sr.Microphone() as source:
                audio = r.listen(source)

            try:
                language_choice = r.recognize_google(audio)
                if language_choice.lower() not in ["en", "ta", "hi"]:
                    language_choice = 'en'
            except sr.UnknownValueError:
                continue

        if not voice_gender:
            text_to_speech("Select a voice gender (male or female):")
            with sr.Microphone() as source:
                audio = r.listen(source)

            try:
                voice_gender = r.recognize_google(audio)
                if voice_gender.lower() not in ["male", "female"]:
                    voice_gender = 'male'
            except sr.UnknownValueError:
                continue

        text_to_speech("Now you can ask queries.")

        with sr.Microphone() as source:
            audio = r.listen(source)

        try:
            question = r.recognize_google(audio)
            sentiment = analyze_sentiment(question)
            print(f"Sentiment: {sentiment}")

            if sentiment == "positive":
              text_to_speech("I sense a positive sentiment in your query thats great")
            elif sentiment == "negative":
              text_to_speech("I sense a negative sentiment in your query I am here to help  lets see if I can address any concerns.")
            else:
              text_to_speech("Your query seems neutral If you have any questions feel free to ask.")
        except sr.UnknownValueError:
            continue

        if question.lower() == "exit":
            break
        else:
            response = generate_response(question, language_choice, voice_gender)
            text_to_speech(response, language_choice, voice_gender)

            # Store the user's voice command in Firebase
            store_command(question, language_choice, voice_gender)

        while True:
            text_to_speech("Do you have any other queries? Say 'yes' or 'no'.")
            with sr.Microphone() as source:
                audio = r.listen(source)

            try:
                next_question = r.recognize_google(audio).lower()

                if any(keyword in next_question for keyword in ['yes', 'yeah', 'yup', 'sure']):
                    break
                elif 'no' in next_question:
                    continue_playing = False
                    break
            except sr.UnknownValueError:
                continue

    text_to_speech("Thank you for using the query system. Goodbye!")
    return redirect('/')

def generate_response(question, language_choice, voice_gender):
    # Load responses from the JSON file
    with open('responses.json', 'r') as file:
        response_data = json.load(file)

    # Process the question using spaCy for entity recognition
    doc = nlp(question)
    entities = [ent.text.lower() for ent in doc.ents]

    # Check each response pattern in the JSON file
    for response_entry in response_data['responses']:
        if all(keyword.lower() in question.lower() for keyword in response_entry['patterns']):
            return response_entry['response']

    # If no matching pattern is found, return the default response
    return response_data['default_response']

def store_command(question, language_choice, voice_gender):
    # Get a reference to the database
    ref = db.reference('/voice_commands')

    # Push the voice command data to the database
    ref.push({
        'question': question,
        'language_choice': language_choice,
        'voice_gender': voice_gender
    })

@app.route('/chat', methods=['POST'])
def chat():
    user_input = request.json.get('message', '').strip()
    if not user_input:
        return {"response": "Please provide a message to process."}, 400

    # Process the input and generate a response
    response = generate_response(user_input, "en", "f")  # Assuming English and female voice for chatbot
    return {"response": response}


@app.route('/')
def index():
    return render_template('index.html')

@app.route('/process', methods=['POST'])
def process():
    return process_query()

if __name__ == '__main__':
    app.run(debug=True)




<!DOCTYPE html>
<html>

<head>
    <meta charset="UTF-8">
    <title>BIT QUERY SYSTEM</title>
    <style>
        body {
            background-color: lightblue;
            font-family: Arial, sans-serif;
            background-image: url("{{ url_for('static', filename='background.jpg') }}");
            background-size: cover;
            background-repeat: no-repeat;
        }

        #container {
            width: 400px;
            margin: 0 auto;
            padding: 20px;
            background-color: #fff;
            border: 1px solid #ccc;
            border-radius: 5px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            margin-top: 20%;
        }

        h1 {
            text-align: center;
        }

        form {
            text-align: center;
            margin-top: 20px;
        }

        .button {
            padding: 10px 20px;
            background-color: orangered;
            color: #fff;
            border: none;
            border-radius: 4px;
            font-size: 16px;
            cursor: pointer;
        }

        .button:hover {
            background-color: red;
        }

        .ocean {
            height: 5%;
            width: 100%;
            position: absolute;
            bottom: 0;
            left: 0;
            background: #015871;
            display: none;
        }

        .wave {
            background: url(https://s3-us-west-2.amazonaws.com/s.cdpn.io/85486/wave.svg) repeat-x;
            position: absolute;
            top: -198px;
            width: 6400px;
            height: 198px;
            animation: newWave 7s cubic-bezier(0.36, 0.45, 0.63, 0.53) infinite;
        }

        .wave:nth-of-type(2) {
            top: -175px;
            animation: newWave 7s cubic-bezier(0.36, 0.45, 0.63, 0.53) -.125s infinite, swell 7s ease -1.25s infinite;
            opacity: 1;
        }

        @keyframes newWave {
            0% {
                margin-left: 0;
            }

            100% {
                margin-left: -1600px;
            }
        }

        @keyframes swell {

            0%,
            100% {
                transform: translate3d(0, -25px, 0);
            }

            50% {
                transform: translate3d(0, 5px, 0);
            }
        }

        .cursor-shadow {
            position: absolute;
            width: 20px;
            height: 20px;
            border-radius: 50%;
            background-color: #ffffff;
            pointer-events: none;
            opacity: 0;
            transition: opacity 0.3s ease;
        }

        #chat-container {
            position: fixed;
            top: 10%;
            right: -400px;
            width: 350px;
            background-color: white;
            border: 1px solid #ccc;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
            border-radius: 5px;
            padding: 10px;
            transition: right 0.5s ease;
            z-index: 1000;
        }

        #chat-container.open {
            right: 10px;
        }

        #chat-box {
            height: 300px;
            overflow-y: auto;
            border: 1px solid #ccc;
            padding: 10px;
            background-color: #f9f9f9;
        }

        #chat-input {
            width: 80%;
            padding: 10px;
            margin-top: 10px;
        }

        #chat-container button {
            padding: 10px;
            background-color: orangered;
            color: white;
            border: none;
            border-radius: 4px;
        }

        #chat-header {
            background-color: orangered;
            color: white;
            padding: 10px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            border-bottom: 1px solid #ccc;
        }

        #chat-header h2 {
            margin: 0;
            font-size: 18px;
        }

        #chat-close {
            background: none;
            border: none;
            color: white;
            font-size: 20px;
            font-weight: bold;
            cursor: pointer;
            margin: 0;
            padding: 0;
            line-height: 1;
        }

        #chat-close:hover {
            color: #ffcccc;
        }
    </style>
</head>

<body class="body">
    <div id="container">
        <h1>Query System</h1>
        <button class="button" onclick="toggleChat()">Toggle Chat</button>
        <form action="/process" method="post">
            <button id="queryButton" class="button" type="submit" onclick="startWaveAnimation()">Start Query
                System</button>
                
        </form>
        
        <div id="waveContainer" class="wave-container ocean">
            <div class="wave"></div>
            <div class="wave"></div>
        </div>
    </div>
    

    <div class="cursor-shadow"></div>

    <div id="chat-container">
        <div id="chat-header">
            <h2>Chat with BIT-Bot</h2>
            <button id="chat-close" onclick="toggleChat()">✖</button>
        </div>
        <div id="chat-box">
            <!-- Chat messages will appear here -->
        </div>
        <input id="chat-input" type="text" placeholder="Type your message...">
        <button onclick="sendMessage()">Send</button>
        <button onclick="clearChat()">Clear</button> <!-- Clear Button -->
    </div>

    <script>
        function sendMessage() {
            const input = document.getElementById('chat-input');
            const message = input.value.trim();
            if (!message) return;

            const chatBox = document.getElementById('chat-box');
            const userMessage = `<p><strong>You:</strong> ${message}</p>`;
            chatBox.innerHTML += userMessage;
            input.value = '';

            fetch('/chat', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ message }),
            })
                .then(response => response.json())
                .then(data => {
                    const botMessage = `<p><strong>Bot:</strong> ${data.response}</p>`;
                    chatBox.innerHTML += botMessage;
                    chatBox.scrollTop = chatBox.scrollHeight;
                })
                .catch(error => {
                    const errorMessage = `<p><strong>Error:</strong> Failed to fetch response.</p>`;
                    chatBox.innerHTML += errorMessage;
                });
        }

        function clearChat() {
            const chatBox = document.getElementById('chat-box');
            chatBox.innerHTML = ''; // Clears all chat messages
        }

        function toggleChat() {
            const chatContainer = document.getElementById('chat-container');
            chatContainer.classList.toggle('open');
        }
    </script>

    </script>
</body>

</html>